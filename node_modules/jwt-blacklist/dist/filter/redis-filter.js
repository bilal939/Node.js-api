"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisFilter = void 0;
var redis = __importStar(require("redis"));
var config_1 = require("../config");
var utils_1 = require("../utils");
var util_1 = require("util");
var bloomxx = require('bloomxx');
var RedisFilter = /** @class */ (function () {
    function RedisFilter(config) {
        if (config === void 0) { config = config_1.defaultConfig; }
        this.config = config;
        this.lastDayIndex = Math.floor(utils_1.nowInSeconds() / utils_1.DAY_IN_SECONDS);
        this.filters = new Map();
        this.redis = redis.createClient(this.config.redisOptions);
    }
    RedisFilter.prototype.initialize = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var key, get, dayIndex;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        key = ((_a = this.config.redisOptions) === null || _a === void 0 ? void 0 : _a.key) + ",dayIndex";
                        get = util_1.promisify(this.redis.get).bind(this.redis);
                        return [4 /*yield*/, get(key)];
                    case 1:
                        dayIndex = _b.sent();
                        if (dayIndex) {
                            this.lastDayIndex = Number(dayIndex);
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisFilter.prototype.add = function (token, exp) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var dayIndex, options, filter_1, initialize, filter, add;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dayIndex = Math.floor(exp / utils_1.DAY_IN_SECONDS);
                        if (!!this.filters.has(dayIndex)) return [3 /*break*/, 2];
                        options = __assign(__assign({}, this.config.redisOptions), { key: ((_a = this.config.redisOptions) === null || _a === void 0 ? void 0 : _a.key) + "," + dayIndex, redis: this.redis });
                        filter_1 = bloomxx.RedisFilter.createOptimal(this.config.daySize, this.config.errorRate, options);
                        initialize = util_1.promisify(filter_1.initialize).bind(filter_1);
                        return [4 /*yield*/, initialize()];
                    case 1:
                        _b.sent();
                        this.filters.set(dayIndex, filter_1);
                        _b.label = 2;
                    case 2:
                        filter = this.filters.get(dayIndex);
                        add = util_1.promisify(filter.add).bind(filter);
                        return [4 /*yield*/, Promise.all([add(token), this.clearUnused()])];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisFilter.prototype.has = function (token, exp) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var dayIndex, options, filter_2, initialize, filter, has, _b, ok, _;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dayIndex = Math.floor(exp / utils_1.DAY_IN_SECONDS);
                        if (!!this.filters.has(dayIndex)) return [3 /*break*/, 2];
                        options = __assign(__assign({}, this.config.redisOptions), { key: ((_a = this.config.redisOptions) === null || _a === void 0 ? void 0 : _a.key) + "," + dayIndex, redis: this.redis });
                        filter_2 = bloomxx.RedisFilter.createOptimal(this.config.daySize, this.config.errorRate, options);
                        initialize = util_1.promisify(filter_2.initialize).bind(filter_2);
                        return [4 /*yield*/, initialize()];
                    case 1:
                        _c.sent();
                        this.filters.set(dayIndex, filter_2);
                        _c.label = 2;
                    case 2:
                        filter = this.filters.get(dayIndex);
                        has = util_1.promisify(filter.has).bind(filter);
                        return [4 /*yield*/, Promise.all([has(token), this.clearUnused()])];
                    case 3:
                        _b = _c.sent(), ok = _b[0], _ = _b[1];
                        return [2 /*return*/, ok];
                }
            });
        });
    };
    RedisFilter.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            var jobs;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        jobs = [];
                        this.filters.forEach(function (filter) {
                            var del = util_1.promisify(filter.del).bind(filter);
                            jobs.push(del());
                        });
                        return [4 /*yield*/, Promise.all(jobs)];
                    case 1:
                        _a.sent();
                        this.filters.clear();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    RedisFilter.prototype.clearUnused = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var dayIndex, jobs, i, filter, del, i, key, set;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        dayIndex = Math.floor(utils_1.nowInSeconds() / utils_1.DAY_IN_SECONDS);
                        jobs = [];
                        for (i = this.lastDayIndex; i < dayIndex; i++) {
                            if (!this.filters.has(i)) {
                                continue;
                            }
                            filter = this.filters.get(i);
                            del = util_1.promisify(filter.del).bind(filter);
                            jobs.push(del());
                        }
                        return [4 /*yield*/, Promise.all(jobs)];
                    case 1:
                        _b.sent();
                        for (i = this.lastDayIndex; i < dayIndex; i++) {
                            this.filters.delete(i);
                        }
                        if (!(this.lastDayIndex < dayIndex)) return [3 /*break*/, 3];
                        this.lastDayIndex = dayIndex;
                        key = ((_a = this.config.redisOptions) === null || _a === void 0 ? void 0 : _a.key) + ",dayIndex";
                        set = util_1.promisify(this.redis.set).bind(this.redis);
                        return [4 /*yield*/, set(key, this.lastDayIndex.toString())];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return RedisFilter;
}());
exports.RedisFilter = RedisFilter;
